# --- Create folders ---
mkdir -p backend frontend/frontend_assets frontend/src
# --- .replit + nix (run backend by default) ---
cat > .replit <<'EOF'
run = ["bash", "-lc", "uvicorn backend.main:app --host 0.0.0.0 --port 8000"]
EOF

cat > replit.nix <<'EOF'
{ pkgs }: {
  deps = [
    pkgs.python311
    pkgs.python311Packages.pip
    pkgs.nodejs_20
  ];
}
EOF

# --- Backend files ---
cat > backend/requirements.txt <<'EOF'
fastapi
uvicorn[standard]
pydantic
sqlmodel
python-multipart
requests
jinja2
openai
EOF

cat > backend/models.py <<'EOF'
from typing import Optional
from sqlmodel import SQLModel, Field
from datetime import datetime

class Lead(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: Optional[str] = None
    email: str
    phone: Optional[str] = None
    sms_consent: bool = False
    city: Optional[str] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)

class Vessel(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    lead_id: int
    brand: str
    model: Optional[str] = None
    year: Optional[int] = None
    engine_type: Optional[str] = None   # shaft | ips | outboard | other
    hours: Optional[int] = None
    gyro: bool = False
    refit_year: Optional[int] = None
    region: Optional[str] = "SE_US"
    created_at: datetime = Field(default_factory=datetime.utcnow)

class EstimateRequest(SQLModel):
    brand: str
    model: Optional[str] = None
    year: Optional[int] = None
    engine_type: Optional[str] = None
    hours: Optional[int] = None
    gyro: bool = False
    refit_year: Optional[int] = None
    region: Optional[str] = "SE_US"

class EstimateResponse(SQLModel):
    low: int
    most_likely: int
    high: int
    wholesale: int
    confidence: str
    comps: list
    narrative: str
EOF

cat > backend/estimate.py <<'EOF'
import os
from .models import EstimateRequest, EstimateResponse
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def rules_based_estimate(req: EstimateRequest):
    # Base + simple adjustments; tune later with real comps
    base = 500_000
    if req.year:
        base += int((req.year - 2012) * 20_000)

    # Hours adjustment (diesel heuristic)
    if req.hours is not None:
        base -= int(max(0, req.hours - 600) / 100 * 7000)

    # Gyro premium
    if req.gyro:
        base = int(base * 1.05)

    # Refit premium (if a few years after build)
    if req.refit_year and req.year and (req.refit_year - req.year) >= 3:
        base = int(base * 1.03)

    # Region tweak
    region_factor = {"SE_US": 1.00, "NE_US": 0.98, "MED": 1.04}
    base = int(base * region_factor.get(req.region, 1.0))

    low, most, high = int(base * 0.92), int(base), int(base * 1.08)
    wholesale = int(most * 0.84)

    # Placeholder comps (replace with real data later)
    comps = [
        {"title": "2019 Sunseeker 68", "ask": most + 100_000, "year": 2019, "loa": 71, "region": "FL"},
        {"title": "2018 Azimut 66",    "ask": most - 50_000,  "year": 2018, "loa": 66, "region": "FL"},
        {"title": "2020 Princess 65",  "ask": most + 180_000, "year": 2020, "loa": 65, "region": "FL"},
    ]

    score = sum([bool(req.year), bool(req.hours), bool(req.brand)])
    confidence = "Low" if score <= 1 else ("Medium" if score == 2 else "High")

    return low, most, high, wholesale, confidence, comps

def narrative_for_estimate(req: EstimateRequest, low, most, high):
    prompt = f"""
    You are a yacht valuation assistant. Explain in 4-6 sentences why the price range
    ${low:,} - ${high:,} (USD) is reasonable for a {req.year or ''} {req.brand} {req.model or ''},
    with {req.engine_type or 'unspecified'} engines and ~{req.hours or 'unknown'} hours in {req.region}.
    Mention stabilizer/gyro and refit if relevant. Keep it concise and professional.
    """
    try:
        resp = client.responses.create(
            model="gpt-5.1-mini",
            input=prompt
        )
        return resp.output_text
    except Exception:
        # Fallback narrative if API fails
        return ("This estimate reflects recent market conditions for comparable yachts with similar "
                "year and engine hours in your region. Adjustments were applied for hours, refit history, "
                "and the presence of gyro stabilization where applicable.")

def estimate(req: EstimateRequest) -> EstimateResponse:
    low, most, high, wholesale, confidence, comps = rules_based_estimate(req)
    narrative = narrative_for_estimate(req, low, most, high)
    return EstimateResponse(
        low=low, most_likely=most, high=high,
        wholesale=wholesale, confidence=confidence,
        comps=comps, narrative=narrative
    )
EOF

cat > backend/pipedrive_api.py <<'EOF'
import os, requests

API = os.getenv("PIPEDRIVE_BASE", "https://api.pipedrive.com/v1")
TOKEN = os.getenv("PIPEDRIVE_API_KEY")
PIPELINE_ID = os.getenv("PIPEDRIVE_PIPELINE_ID")
STAGE_ID = os.getenv("PIPEDRIVE_STAGE_ID")

def create_person(name, email, phone):
    if not TOKEN:
        raise RuntimeError("Missing PIPEDRIVE_API_KEY")
    url = f"{API}/persons?api_token={TOKEN}"
    r = requests.post(url, json={"name": name or email, "email": email, "phone": phone})
    r.raise_for_status()
    data = r.json().get("data")
    return data["id"] if data else None

def create_deal(title, person_id, value=0, currency="USD", custom_fields=None):
    if not TOKEN:
        raise RuntimeError("Missing PIPEDRIVE_API_KEY")
    url = f"{API}/deals?api_token={TOKEN}"
    payload = {"title": title, "person_id": person_id, "value": value, "currency": currency}
    if PIPELINE_ID: payload["pipeline_id"] = int(PIPELINE_ID)
    if STAGE_ID: payload["stage_id"] = int(STAGE_ID)
    if custom_fields: payload.update(custom_fields)
    r = requests.post(url, json=payload)
    r.raise_for_status()
    data = r.json().get("data")
    return data["id"] if data else None
EOF

cat > backend/emailer.py <<'EOF'
import os, requests
from typing import Dict, Any

RESEND_API_KEY = os.getenv("RESEND_API_KEY")
FROM_EMAIL = os.getenv("FROM_EMAIL", "valuations@wavemarinegroup.com")

def send_email(to_email: str, subject: str, html: str) -> Dict[str, Any]:
    if not RESEND_API_KEY:
        # In dev, we just log
        print("[Email skipped] Set RESEND_API_KEY to enable emails.")
        return {"skipped": True}
    r = requests.post(
        "https://api.resend.com/emails",
        headers={"Authorization": f"Bearer {RESEND_API_KEY}", "Content-Type": "application/json"},
        json={"from": FROM_EMAIL, "to": [to_email], "subject": subject, "html": html}
    )
    try:
        return r.json()
    except Exception:
        return {"status_code": r.status_code, "text": r.text}

def valuation_email_html(name, est, vessel):
    return f"""
    <div style="font-family:Arial,sans-serif;color:#0f172a">
      <h2>Your Yacht Valuation</h2>
      <p>{name or "Hi"}, here is the current estimate for your yacht:</p>
      <ul>
        <li><b>Most likely:</b> ${est.most_likely:,}</li>
        <li>Range: ${est.low:,} – ${est.high:,}</li>
        <li>Wholesale (est): ${est.wholesale:,}</li>
        <li>Confidence: {est.confidence}</li>
      </ul>
      <p style="line-height:1.5">{est.narrative}</p>
      <h3>Top Comps</h3>
      <ul>
        {''.join([f"<li>{c['title']} — ${c['ask']:,} ({c['year']}, {c['loa']}ft, {c['region']})</li>" for c in est.comps])}
      </ul>
      <hr/>
      <p><b>Questions?</b> Call/Text James at <a href="tel:+19545410105">954-541-0105</a> or reply to this email.</p>
      <p>Wave Marine Group • #jamescarteryachting</p>
    </div>
    """
EOF

cat > backend/main.py <<'EOF'
import os, json
from fastapi import FastAPI, Depends, Form
from fastapi.middleware.cors import CORSMiddleware
from sqlmodel import SQLModel, create_engine, Session
from .models import Lead, Vessel, EstimateRequest
from .estimate import estimate
from .pipedrive_api import create_person, create_deal
from .emailer import send_email, valuation_email_html

DB_URL = "sqlite:///db.sqlite3"
engine = create_engine(DB_URL)

app = FastAPI(title="Wave Valuation API")

app.add_middleware(
    CORSMiddleware, allow_origins=["*"], allow_credentials=True,
    allow_methods=["*"], allow_headers=["*"]
)

@app.on_event("startup")
def on_startup():
    SQLModel.metadata.create_all(engine)

def get_session():
    with Session(engine) as s:
        yield s

@app.post("/api/lead")
def create_lead(
    email: str = Form(...),
    phone: str = Form(None),
    name: str = Form(None),
    sms_consent: bool = Form(False),
    city: str = Form(None),

    brand: str = Form(...),
    model: str = Form(None),
    year: int = Form(None),
    engine_type: str = Form(None),
    hours: int = Form(None),
    gyro: bool = Form(False),
    refit_year: int = Form(None),

    session: Session = Depends(get_session)
):
    # Persist lead
    lead = Lead(email=email, phone=phone, name=name, sms_consent=sms_consent, city=city)
    session.add(lead); session.commit(); session.refresh(lead)

    vessel = Vessel(
        lead_id=lead.id, brand=brand, model=model, year=year,
        engine_type=engine_type, hours=hours, gyro=gyro, refit_year=refit_year
    )
    session.add(vessel); session.commit()

    # Estimate
    est = estimate(EstimateRequest(
        brand=brand, model=model, year=year, engine_type=engine_type,
        hours=hours, gyro=gyro, refit_year=refit_year
    ))

    # Push to Pipedrive (if configured)
    try:
        pid = create_person(name, email, phone)
        custom = {}
        # If you created custom fields, set their keys in Replit Secrets and uncomment:
        # custom[os.getenv("PD_FIELD_BRAND","")] = brand
        # custom[os.getenv("PD_FIELD_MODEL","")] = model
        # custom[os.getenv("PD_FIELD_YEAR","")] = year
        # custom[os.getenv("PD_FIELD_ENGINE_TYPE","")] = engine_type
        # custom[os.getenv("PD_FIELD_HOURS","")] = hours
        # custom[os.getenv("PD_FIELD_GYRO","")] = "Yes" if gyro else "No"
        # custom[os.getenv("PD_FIELD_REFIT","")] = refit_year
        # custom[os.getenv("PD_FIELD_VAL_JSON","")] = json.dumps(est.dict())
        create_deal(
            title=f"Valuation: {brand} {model or ''} {year or ''}".strip(),
            person_id=pid,
            value=est.most_likely,
            custom_fields=custom if any(custom.keys()) else None
        )
    except Exception as e:
        print("Pipedrive error:", e)

    # Email report (HTML MVP)
    try:
        html = valuation_email_html(name, est, vessel)
        send_email(email, "Your Yacht Valuation", html)
    except Exception as e:
        print("Email error:", e)

    return {"ok": True, "estimate": est.dict()}
EOF

# --- Frontend files ---
cat > frontend/package.json <<'EOF'
{
  "name": "wave-valuation-frontend",
  "private": true,
  "scripts": { "dev": "vite", "build": "vite build", "preview": "vite preview" },
  "dependencies": { "react": "^18.3.1", "react-dom": "^18.3.1" },
  "devDependencies": { "vite": "^5.4.0", "@vitejs/plugin-react": "^4.3.0" }
}
EOF

cat > frontend/vite.config.js <<'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
export default defineConfig({
  plugins: [react()],
  server: { port: 5173 }
})
EOF

cat > frontend/index.html <<'EOF'
<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <title>What’s Your Yacht Worth?</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
EOF

cat > frontend/src/styles.css <<'EOF'
body { font-family: system-ui, Arial; margin:0; color:#0f172a; background:#ffffff; }
.container { max-width: 760px; margin: 0 auto; padding: 24px; }
input, select, button { padding:12px; margin:6px 0; width:100%; box-sizing:border-box; }
button { background:#0ea5e9; color:white; border:0; border-radius:8px; font-weight:600; cursor:pointer; }
.card { background:#f8fafc; padding:16px; border-radius:12px; margin-top:16px; border:1px solid #e5e7eb; }
h1 { margin: 12px 0 8px; }
h3 { margin: 8px 0 8px; }
label { display:block; margin: 6px 0; }
.small { font-size: 12px; color:#475569; }
EOF

cat > frontend/src/api.js <<'EOF'
export async function submitLead(form) {
  const base = import.meta.env.VITE_API || 'http://127.0.0.1:8000'
  const res = await fetch(`${base}/api/lead`, { method: 'POST', body: form })
  if (!res.ok) throw new Error('Lead submit failed')
  return res.json()
}
EOF

cat > frontend/src/main.jsx <<'EOF'
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'
import './styles.css'
createRoot(document.getElementById('root')).render(<App />)
EOF

cat > frontend/src/App.jsx <<'EOF'
import React, { useState } from 'react'
import { submitLead } from './api'

export default function App() {
  const [step, setStep] = useState(1)
  const [loading, setLoading] = useState(false)
  const [estimate, setEstimate] = useState(null)
  const [contact, setContact] = useState({ name:'', email:'', phone:'', sms_consent:true, city:'' })
  const [vessel, setVessel] = useState({
    brand:'', model:'', year:'', engine_type:'', hours:'', refit_year:'', gyro:false
  })

  const onSubmit = async () => {
    if (!contact.email || !contact.phone || !vessel.brand) {
      alert('Please provide Email, Phone, and Brand.'); return
    }
    setLoading(true)
    try {
      const form = new FormData()
      Object.entries(contact).forEach(([k,v]) => form.append(k, v))
      Object.entries(vessel).forEach(([k,v]) => form.append(k, v))
      const data = await submitLead(form)
      setEstimate(data.estimate)
      setStep(3)
    } catch (e) { alert(e.message) }
    finally { setLoading(false) }
  }

  return (
    <div className="container">
      <h1>What’s your yacht worth today?</h1>
      <p>Instant AI estimate + recent comps. Free. Private.</p>

      {step===1 && (
        <div className="card">
          <h3>Step 1 — Contact</h3>
          <input placeholder="Name (optional)" value={contact.name} onChange={e=>setContact({...contact,name:e.target.value})}/>
          <input placeholder="Email *" value={contact.email} onChange={e=>setContact({...contact,email:e.target.value})}/>
          <input placeholder="Phone *" value={contact.phone} onChange={e=>setContact({...contact,phone:e.target.value})}/>
          <label><input type="checkbox" checked={contact.sms_consent} onChange={e=>setContact({...contact,sms_consent:e.target.checked})}/> I agree to receive texts/calls from Wave Marine Group (Msg&Data rates may apply).</label>
          <button onClick={()=>setStep(2)}>Continue</button>
          <p className="small">Licensed Broker • South Florida • #jamescarteryachting</p>
        </div>
      )}

      {step===2 && (
        <div className="card">
          <h3>Step 2 — Vessel</h3>
          <input placeholder="Brand *" value={vessel.brand}
                 onChange={e=>setVessel({...vessel,brand:e.target.value})}/>
          <input placeholder="Model" value={vessel.model}
                 onChange={e=>setVessel({...vessel,model:e.target.value})}/>
          <input placeholder="Year" value={vessel.year}
                 onChange={e=>setVessel({...vessel,year:e.target.value})}/>
          <select value={vessel.engine_type}
                  onChange={e=>setVessel({...vessel,engine_type:e.target.value})}>
            <option value="">Engine type</option>
            <option>shaft</option><option>ips</option><option>outboard</option><option>other</option>
          </select>
          <input placeholder="Engine hours" value={vessel.hours}
                 onChange={e=>setVessel({...vessel,hours:e.target.value})}/>
          <label>
            <input type="checkbox" checked={vessel.gyro}
                   onChange={e=>setVessel({...vessel,gyro:e.target.checked})}/>
            Seakeeper/Gyro
          </label>
          <input placeholder="Refit year (optional)" value={vessel.refit_year}
                 onChange={e=>setVessel({...vessel,refit_year:e.target.value})}/>
          <button disabled={loading} onClick={onSubmit}>{loading?'Generating...':'Get My Valuation'}</button>
        </div>
      )}

      {step===3 && estimate && (
        <div className="card">
          <h3>Your Estimate</h3>
          <p><b>Most likely:</b> ${estimate.most_likely.toLocaleString()}</p>
          <p>Range: ${estimate.low.toLocaleString()} – ${estimate.high.toLocaleString()}</p>
          <p>Wholesale: ${estimate.wholesale.toLocaleString()}</p>
          <p>{estimate.narrative}</p>
          <h4>Top comps</h4>
          <ul>{estimate.comps.map((c,i)=><li key={i}>{c.title} — ${c.ask.toLocaleString()} ({c.year}, {c.loa}ft, {c.region})</li>)}</ul>
          <a href="tel:+19545410105"><button>Call James</button></a>
        </div>
      )}
    </div>
  )
}
EOF

# --- Backend install quick tip (not executed automatically) ---
echo 'Done. Next steps:
1) In Replit Shell: pip install -r backend/requirements.txt
2) Click Run to start backend (FastAPI on port 8000).
3) Open a Shell, cd frontend && npm i && npm run dev (frontend on 5173).
4) In Replit Secrets, add: OPENAI_API_KEY, PIPEDRIVE_API_KEY (and optionally RESEND_API_KEY, FROM_EMAIL).
5) In another tab, open the frontend URL; set VITE_API to your backend URL if needed.' 
